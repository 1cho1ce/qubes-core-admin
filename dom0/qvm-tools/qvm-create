#!/usr/bin/python2.6
#
# The Qubes OS Project, http://www.qubes-os.org
#
# Copyright (C) 2010  Joanna Rutkowska <joanna@invisiblethingslab.com>
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
#
#

from qubes.qubes import QubesVmCollection
from qubes.qubes import QubesVmLabels
from optparse import OptionParser;
import subprocess
import re

def find_net_devices():
    p = subprocess.Popen (["lspci", "-mm", "-n"], stdout=subprocess.PIPE)
    result = p.communicate()
    retcode = p.returncode
    if (retcode != 0):
        print "ERROR when executing lspci!"
        raise IOError

    net_devices = set()
    rx_netdev = re.compile (r"^([0-9][0-9]:[0-9][0-9].[0-9]) \"02")
    for dev in str(result[0]).splitlines():
        match = rx_netdev.match (dev)
        if match is not None:
            dev_bdf = match.group(1)
            assert dev_bdf is not None
            net_devices.add (dev_bdf)

    return  net_devices


def main():
    usage = "usage: %prog [options] <vm-name>"
    parser = OptionParser (usage)
    parser.add_option ("-t", "--template", dest="template",
                       help="Specify the TemplateVM to use")
    parser.add_option ("-l", "--label", dest="label",
                       help="Specify the label to use for the new VM (e.g. red, yellow, green, ...)")
    parser.add_option ("-p", "--proxy", action="store_true", dest="proxyvm", default=False,
                        help="Create ProxyVM")
    parser.add_option ("-n", "--net", action="store_true", dest="netvm", default=False,
                        help="Create NetVM")
    parser.add_option ("-m", "--mem", dest="mem", default=None,
                        help="Initial memory size (in MB)")
    parser.add_option ("-c", "--vcpus", dest="vcpus", default=None,
                        help="VCPUs count")
 
    parser.add_option ("-q", "--quiet", action="store_false", dest="verbose", default=True)
    (options, args) = parser.parse_args ()
    if (len (args) != 1):
        parser.error ("You must specify VM name!")
    vmname = args[0]

    if options.netvm and options.proxyvm:
        parser.error ("You must specify at most one of --proxy and --net")
        
    if options.label is None:
        print "You must choose a label for the new VM by passing the --label option."
        print "Possible values are:"
        for l in QubesVmLabels.values():
            print "* {0}".format(l.name)
        exit (1)

    if options.label not in QubesVmLabels:
        print "Wrong label name, supported values are the following:"
        for l in QubesVmLabels.values():
            print "* {0}".format(l.name)
        exit (1)
    label = QubesVmLabels[options.label]

    qvm_collection = QubesVmCollection()
    qvm_collection.lock_db_for_writing()
    qvm_collection.load()

    if qvm_collection.get_vm_by_name(vmname) is not None:
        print "A VM with the name '{0}' already exists in the system.".format(vmname)
        exit(1)

    if options.template is not None:
        template_vm = qvm_collection.get_vm_by_name(options.template)
        if template_vm is None:
            print "There is no (Templete)VM with the name '{0}'".format(options.template)
            exit (1)
        if not template_vm.is_template():
            print "VM '{0}' is not a TemplateVM".format(options.template)
            exit (1)
        if (options.verbose):
            print "--> Using TemplateVM: {0}".format(template_vm.name)

    else:
        if qvm_collection.get_default_template_vm() is None:
            print "No default TempleteVM defined!"
            exit (1)
        else:
            template_vm = qvm_collection.get_default_template_vm()
            if (options.verbose):
                print "--> Using default TemplateVM: {0}".format(template_vm.name)

    vm = None
    if options.netvm:
        vm = qvm_collection.add_new_netvm(vmname, template_vm, label = label)
        
        net_devices = find_net_devices()
        print "Found the following net devices in your system:"
        dev_str = ''
        for dev in net_devices:
            print "--> {0}".format(dev)
            dev_str += '"{0}", '.format(dev)

        print "Assigning them to the netvm '{0}'".format(vmname)
        vm.pcidevs = dev_str

    elif options.proxyvm:
        vm = qvm_collection.add_new_proxyvm(vmname, template_vm, label = label)
    else:
        vm = qvm_collection.add_new_appvm(vmname, template_vm, label = label)

    if options.mem is not None:
        vm.memory = options.mem

    if options.vcpus is not None:
        vm.vcpus = options.vcpus

    try:
        vm.create_on_disk(verbose=options.verbose)
        vm.add_to_xen_storage()

    except (IOError, OSError) as err:
        print "ERROR: {0}".format(err)
        vm.remove_from_disk()
        exit (1)


    qvm_collection.save()
    qvm_collection.unlock_db()


main()
