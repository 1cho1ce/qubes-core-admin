#!/usr/bin/python2.6
#
# The Qubes OS Project, http://www.qubes-os.org
#
# Copyright (C) 2010  Joanna Rutkowska <joanna@invisiblethingslab.com>
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
#
#

from qubes.qubes import QubesVmCollection
from qubes.qubes import QubesException
from optparse import OptionParser;

def main():
    usage = "usage: %prog [options] <vm-template-name>\n"\
            "Adds an already installed template to the Qubes DB"
          
    parser = OptionParser (usage)
    parser.add_option ("-p", "--path", dest="dir_path",
                       help="Specify path to the template directory")
    parser.add_option ("-c", "--conf", dest="conf_file",
                       help="Specify the Xen VM .conf file to use\
                       (relative to the template dir path)")

    parser.add_option ("--rpm", action="store_true", dest="installed_by_rpm",
                       help="Template files have been installed by RPM", default=False)


    (options, args) = parser.parse_args ()
    if (len (args) != 1):
        parser.error ("You must specify at least the TemplateVM name!")
    vmname = args[0]

    qvm_collection = QubesVmCollection()
    qvm_collection.lock_db_for_writing()
    qvm_collection.load()

    if qvm_collection.get_vm_by_name(vmname) is not None:
        print "ERROR: A VM with the name '{0}' already exists in the system.".format(vmname)
        exit(1)

    vm = qvm_collection.add_new_templatevm(vmname, 
                                         conf_file=options.conf_file,
                                         dir_path=options.dir_path,
                                         installed_by_rpm=options.installed_by_rpm)

    try:
        vm.verify_files()
    except QubesException as err:
        print "ERROR: {0}".format(err)
        qvm_collection.pop(vm.qid)
        exit (1)

    qvm_collection.save()
    qvm_collection.unlock_db()
    
main()
