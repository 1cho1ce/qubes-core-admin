#!/usr/bin/python2.6
#
# The Qubes OS Project, http://www.qubes-os.org
#
# Copyright (C) 2010  Joanna Rutkowska <joanna@invisiblethingslab.com>
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
#
#

from qubes.qubes import QubesVmCollection
from qubes.qubes import QubesException
from optparse import OptionParser
import subprocess
import os
import sys

qubes_guid_path = "/usr/bin/qubes_guid"

def main():
    usage = "usage: %prog [options] <vm-name>"
    parser = OptionParser (usage)
    parser.add_option ("-q", "--quiet", action="store_false", dest="verbose", default=True)
    parser.add_option ("--no-guid", action="store_true", dest="noguid", default=False,
		      help="Do not start the GUId (ignored)")
    parser.add_option ("--drive", dest="drive", default=None,
                      help="Temporarily attach specified drive as CD/DVD or hard disk (can be specified with prefix 'hd:' or 'cdrom:', default is cdrom)")
    parser.add_option ("--hddisk", dest="drive_hd", default=None,
                      help="Temporarily attach specified drive as hard disk")
    parser.add_option ("--cdrom", dest="drive_cdrom", default=None,
                      help="Temporarily attach specified drive as CD/DVD")
    parser.add_option ("--dvm", action="store_true", dest="preparing_dvm", default=False,
                      help="Do actions necessary when preparing DVM image")
    parser.add_option ("--custom-config", action="store", dest="custom_config", default=None,
                      help="Use custom Xen config instead of Qubes-generated one")

    (options, args) = parser.parse_args ()
    if (len (args) != 1):
        parser.error ("You must specify VM name!")
    vmname = args[0]

    qvm_collection = QubesVmCollection()
    qvm_collection.lock_db_for_reading()
    qvm_collection.load()
    qvm_collection.unlock_db()

    vm = qvm_collection.get_vm_by_name(vmname)
    if vm is None:
        print >> sys.stderr, "A VM with the name '{0}' does not exist in the system.".format(vmname)
        exit(1)

    if options.custom_config:
        vm.conf_file = options.custom_config

    try:
        vm.verify_files()
        xid = vm.start(verbose=options.verbose, preparing_dvm=options.preparing_dvm, start_guid=not options.noguid)
    except (IOError, OSError, QubesException) as err:
        print >> sys.stderr, "ERROR: {0}".format(err)
        exit (1)

main()
